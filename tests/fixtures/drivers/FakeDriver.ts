/**
 * @athenna/database
 *
 * (c) JoÃ£o Lenon <lenon@athenna.io>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

export const FakeDriver: any = {
  table: () => {},
  isConnected: false,
  isSavedOnFactory: false,
  connection: '',
  tableName: '',
  client: undefined,
  qb: undefined,
  name: Config.get('database.default', 'postgres'),
  clone: () => FakeDriver,
  getClient: () => {},
  setClient: client => {
    FakeDriver.client = client
    return FakeDriver
  },
  getQueryBuilder: () => {},
  setQueryBuilder: () => {},
  joinByType: () => {},
  connect: () => {},
  close: () => {},
  query: () => {},
  startTransaction: () => {},
  commitTransaction: () => {},
  rollbackTransaction: () => {},
  runMigrations: () => {},
  revertMigrations: () => {},
  getDatabases: () => {},
  getCurrentDatabase: () => {},
  hasDatabase: () => {},
  createDatabase: () => {},
  dropDatabase: () => {},
  getTables: () => {},
  hasTable: () => {},
  createTable: () => {},
  dropTable: () => {},
  truncate: () => {},
  raw: () => {},
  avg: () => {},
  avgDistinct: () => {},
  max: () => {},
  min: () => {},
  sum: () => {},
  sumDistinct: () => {},
  increment: () => {},
  decrement: () => {},
  count: () => {},
  countDistinct: () => {},
  findOrFail: () => {},
  findOr: () => {},
  find: () => {},
  findMany: () => {},
  collection: () => {},
  paginate: () => {},
  create: () => {},
  createMany: () => {},
  createOrUpdate: () => {},
  update: () => {},
  delete: () => {},
  dump: () => {},
  when: () => {},
  select: () => {},
  selectRaw: () => {},
  from: () => {},
  fromRaw: () => {},
  join: () => {},
  leftJoin: () => {},
  rightJoin: () => {},
  crossJoin: () => {},
  fullOuterJoin: () => {},
  leftOuterJoin: () => {},
  rightOuterJoin: () => {},
  joinRaw: () => {},
  groupBy: () => {},
  groupByRaw: () => {},
  having: () => {},
  havingRaw: () => {},
  havingExists: () => {},
  havingNotExists: () => {},
  havingIn: () => {},
  havingNotIn: () => {},
  havingBetween: () => {},
  havingNotBetween: () => {},
  havingNull: () => {},
  havingNotNull: () => {},
  orHaving: () => {},
  orHavingRaw: () => {},
  orHavingExists: () => {},
  orHavingNotExists: () => {},
  orHavingIn: () => {},
  orHavingNotIn: () => {},
  orHavingBetween: () => {},
  orHavingNotBetween: () => {},
  orHavingNull: () => {},
  orHavingNotNull: () => {},
  where: () => {},
  whereNot: () => {},
  whereRaw: () => {},
  whereExists: () => {},
  whereNotExists: () => {},
  whereLike: () => {},
  whereILike: () => {},
  whereIn: () => {},
  whereNotIn: () => {},
  whereBetween: () => {},
  whereNotBetween: () => {},
  whereNull: () => {},
  whereNotNull: () => {},
  orWhere: () => {},
  orWhereNot: () => {},
  orWhereRaw: () => {},
  orWhereExists: () => {},
  orWhereNotExists: () => {},
  orWhereLike: () => {},
  orWhereILike: () => {},
  orWhereIn: () => {},
  orWhereNotIn: () => {},
  orWhereBetween: () => {},
  orWhereNotBetween: () => {},
  orWhereNull: () => {},
  orWhereNotNull: () => {},
  orderBy: () => {},
  orderByRaw: () => {},
  latest: () => {},
  oldest: () => {},
  offset: () => {},
  limit: () => {}
}
